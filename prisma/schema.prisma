// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attachment {
  id           String      @id @default(cuid())
  link         String
  dateAdded    DateTime    @default(now())
  addedFrom    AddedFrom

  // Relations
  legalCaseId  String?
  legalCase    LegalCase?  @relation(fields: [legalCaseId], references: [id], onDelete: Cascade)

  messageId    String?
  message      Message?    @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

enum AddedFrom {
  LEGAL_CASE
  MESSAGE
}

model CaseHistory {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())

  action      String
  description String    @db.Text
  performedBy String?

  legalCaseId String
  legalCase   LegalCase @relation(fields: [legalCaseId], references: [id], onDelete: Cascade)

  @@map("case_history")
}

model LegalClient {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  firstName       String
  lastName        String
  email           String           @unique
  phone           String?
  location        String?
  password        String?
  notes           String?          @db.Text

  legalCases      LegalCase[]
  messageThreads  MessageThread[]

  @@map("legal_clients")
}


model MessageThread {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())

  legalCaseId     String
  legalCase       LegalCase         @relation(fields: [legalCaseId], references: [id], onDelete: Cascade)

  clientId        String
  client          LegalClient       @relation(fields: [clientId], references: [id])

  professionalId  String
  professional    LegalProfessional @relation(fields: [professionalId], references: [id])

  messages        Message[]

  @@map("message_threads")
}

model Message {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())

  threadId    String
  thread      MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  senderId    String
  senderType  UserType
  content     String       @db.Text
  seen        Boolean      @default(false)

  attachments Attachment[] 

  @@map("messages")
}



model LegalCase {
  id                     String           @id @default(cuid())
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  // Client
  clientId               String?
  client                 LegalClient?     @relation(fields: [clientId], references: [id], onDelete: SetNull)

  // Client Info
  clientName             String?
  clientEmail            String?
  clientPhone            String?

  // Case Details
  legalIssue             String
  caseDescription        String           @db.Text
  location               String?

  // Case Status
  status                 CaseStatus       @default(DRAFT)
  urgency                UrgencyLevel     @default(MEDIUM)

  // Assignment
  assignedTo             String?
  assignedAt             DateTime?
  assignedProfessional   LegalProfessional? @relation("ProfessionalCases", fields: [assignedTo], references: [id])

  // Case Timeline
  estimatedDuration      String?
  postedDate             DateTime         @default(now())

  // Compensation
  compensationMin        Float?
  compensationMax        Float?
  compensationCurrency   String           @default("USD")

  // Relations
  attachments            Attachment[]
  caseHistory            CaseHistory[]
  messageThreads         MessageThread[]
  tags                   Tag

  @@map("legal_cases")
}

model LegalProfessional {
  id                  String           @id @default(cuid())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  firstName           String
  lastName            String
  email               String           @unique
  phone               String?
  password            String
  specialization      Tag              
  yearsOfExperience   Int
  location            String
  isAvailable         Boolean          @default(true)
  isVerified          Boolean          @default(false)
  verifiedAt          DateTime?

  assignedCases       LegalCase[]      @relation("ProfessionalCases")
  messageThreads      MessageThread[]

  @@map("legal_professionals")
}

enum UserType {
  CLIENT
  PROFESSIONAL
}

enum CaseStatus {
  DRAFT
  POSTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Tag {
  FAMILY_LAW
  CRIMINAL_LAW
  CIVIL_LAW
  EMPLOYMENT_LAW
  PROPERTY_LAW
  CONTRACT_LAW
  IMMIGRATION_LAW
  OTHER
}




